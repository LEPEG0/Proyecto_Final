{"ast":null,"code":"import { createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, GoogleAuthProvider, signInWithPopup, deleteUser } from '@angular/fire/auth';\nimport { onAuthStateChanged } from '@angular/fire/auth';\nimport { collectionData } from '@angular/fire/firestore';\nimport { collection, addDoc, doc, deleteDoc } from '@angular/fire/firestore';\nimport { FormControl, FormGroup } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/auth\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/fire/firestore\";\nexport class UserService {\n  constructor(auth, router, firestore) {\n    this.auth = auth;\n    this.router = router;\n    this.firestore = firestore;\n  }\n  //Metodos para usar en componentes\n  iniciarSesion(email, password, google) {\n    if (google) {} else {\n      this.ingresoAuth({\n        email,\n        password\n      }).then(response => {\n        console.log(response);\n        this.consultaUsuarioFs().subscribe(users => {\n          this.usuarios = users;\n        });\n        for (let i of this.usuarios) {\n          if (email == i.correo) {\n            this.usuario = i;\n          }\n        }\n        localStorage.removeItem(\"usuarioActual\");\n        localStorage.setItem(\"usuarioActual\", JSON.stringify(this.usuario));\n      }).catch(error => console.log(error));\n    }\n  }\n  registrarUsuario(usuario, google) {\n    let band = false;\n    if (google) {\n      return true;\n    } else {\n      let email = usuario.correo;\n      let password = usuario.contrasena;\n      this.registroAuth({\n        email,\n        password\n      }).then(response => {\n        this.form = new FormGroup({\n          nombre: new FormControl(usuario.nombre),\n          apellido: new FormControl(usuario.apellido),\n          correo: new FormControl(usuario.correo),\n          telefono: new FormControl(usuario.telefono),\n          contrasena: new FormControl(usuario.contrasena),\n          nacimiento: new FormControl(usuario.nacimiento)\n        });\n        this.usuario = usuario;\n        console.log(response);\n        const resp = this.nuevoUsuarioFs(this.form.value);\n        console.log(resp);\n        localStorage.removeItem(\"usuarioActual\");\n        localStorage.setItem(\"usuarioActual\", JSON.stringify(this.usuario));\n        console.log(\"lograo papi\");\n        band = true;\n      }).catch(error => {\n        console.log(error);\n        if (error != null) {\n          console.log(\"hay error\");\n          band = false;\n        }\n        console.log(\"repetio papi\");\n      });\n      console.log(\"llego aca \" + band);\n      return band;\n    }\n  }\n  cerrarSesion() {\n    this.cerrarAuth();\n    localStorage.removeItem(\"usuarioActual\");\n  }\n  borrarUsuario(usuario) {\n    let email = usuario.correo;\n    this.borrarAuth({\n      email\n    }).then(response => {\n      console.log(response);\n      this.borrarUsuarioFs(usuario);\n    }).catch(error => {\n      console.log(error);\n    });\n  }\n  //Metodos de Firebase Authentication\n  mostrarAuth() {\n    return String(this.auth.currentUser?.email);\n  }\n  registroAuth({\n    email,\n    password\n  }) {\n    return createUserWithEmailAndPassword(this.auth, email, password);\n  }\n  ingresoAuth({\n    email,\n    password\n  }) {\n    return signInWithEmailAndPassword(this.auth, email, password);\n  }\n  cerrarAuth() {\n    return signOut(this.auth);\n  }\n  borrarAuth({\n    email\n  }) {\n    return deleteUser(email);\n  }\n  sesionAuth(user) {\n    onAuthStateChanged(this.auth, user => {\n      if (user) {\n        this.router.navigate(['/logout']);\n      } else {}\n    });\n  }\n  ingresoGoogleAuth() {\n    return signInWithPopup(this.auth, new GoogleAuthProvider());\n  }\n  //Metodos de Firestore\n  nuevoUsuarioFs(usuario) {\n    const usarioRef = collection(this.firestore, 'usuarios');\n    return addDoc(usarioRef, usuario);\n  }\n  consultaUsuarioFs() {\n    const usuarioRef = collection(this.firestore, 'usuarios');\n    return collectionData(usuarioRef, {\n      idField: 'id'\n    });\n  }\n  borrarUsuarioFs(usuario) {\n    const usuarioRef = doc(this.firestore, `usuarios/${usuario.id}`);\n    return deleteDoc(usuarioRef);\n  }\n  validarUsuario(correo) {\n    this.consultaUsuarioFs().subscribe(users => {\n      this.usuarios = users;\n    });\n    if (this.usuarios != null) {\n      for (let i of this.usuarios) {\n        if (i.correo == correo) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return true;\n    }\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.Auth), i0.ɵɵinject(i2.Router), i0.ɵɵinject(i3.Firestore));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","GoogleAuthProvider","signInWithPopup","deleteUser","onAuthStateChanged","collectionData","collection","addDoc","doc","deleteDoc","FormControl","FormGroup","UserService","constructor","auth","router","firestore","iniciarSesion","email","password","google","ingresoAuth","then","response","console","log","consultaUsuarioFs","subscribe","users","usuarios","i","correo","usuario","localStorage","removeItem","setItem","JSON","stringify","catch","error","registrarUsuario","band","contrasena","registroAuth","form","nombre","apellido","telefono","nacimiento","resp","nuevoUsuarioFs","value","cerrarSesion","cerrarAuth","borrarUsuario","borrarAuth","borrarUsuarioFs","mostrarAuth","String","currentUser","sesionAuth","user","navigate","ingresoGoogleAuth","usarioRef","usuarioRef","idField","id","validarUsuario","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Artur\\Desktop\\ProyectoFinal1\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Auth,\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n  signOut,\n  GoogleAuthProvider,\n  signInWithPopup,\n  deleteUser\n} from '@angular/fire/auth';\nimport { onAuthStateChanged } from '@angular/fire/auth';\nimport { Firestore, collectionData } from '@angular/fire/firestore';\nimport { collection, addDoc, doc, deleteDoc } from '@angular/fire/firestore';\nimport { Observable } from 'rxjs';\nimport { Router } from '@angular/router';\nimport User from './user.interface';\nimport { FormControl, FormGroup } from '@angular/forms';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  usuario!: User;\n  usuarios!: User[];\n  form!: FormGroup;\n\n  constructor(\n    private auth: Auth,\n    private router: Router,\n    private firestore: Firestore\n  ) { }\n\n  //Metodos para usar en componentes\n  iniciarSesion(email: string, password: string, google: Boolean) {\n    if (google) {\n\n    } else {\n      this.ingresoAuth({ email, password })\n        .then(response => {\n          console.log(response);\n          this.consultaUsuarioFs().subscribe(users => {\n            this.usuarios = users;\n          });\n          for (let i of this.usuarios) {\n            if (email == i.correo) {\n              this.usuario = i;\n            }\n          }\n          localStorage.removeItem(\"usuarioActual\");\n          localStorage.setItem(\"usuarioActual\", JSON.stringify(this.usuario));\n        })\n        .catch(error => console.log(error));\n    }\n  }\n\n  registrarUsuario(usuario: User, google: Boolean): Boolean {\n    let band = false;\n    if (google) {\n      return true;\n    } else {\n      let email = usuario.correo;\n      let password = usuario.contrasena;\n      this.registroAuth({ email, password })\n        .then(response => {\n          this.form = new FormGroup({\n            nombre: new FormControl(usuario.nombre),\n            apellido: new FormControl(usuario.apellido),\n            correo: new FormControl(usuario.correo),\n            telefono: new FormControl(usuario.telefono),\n            contrasena: new FormControl(usuario.contrasena),\n            nacimiento: new FormControl(usuario.nacimiento)\n          })\n          this.usuario = usuario;\n          console.log(response);\n          const resp = this.nuevoUsuarioFs(this.form.value);\n          console.log(resp);\n          localStorage.removeItem(\"usuarioActual\");\n          localStorage.setItem(\"usuarioActual\", JSON.stringify(this.usuario));\n          console.log(\"lograo papi\");\n          band = true;\n        })\n        .catch(error => {\n          console.log(error)\n          if (error != null) {\n            console.log(\"hay error\")\n            band = false;\n          }\n          console.log(\"repetio papi\");\n        });\n      console.log(\"llego aca \" + band);\n      return band;\n    }\n  }\n\n  cerrarSesion() {\n    this.cerrarAuth();\n    localStorage.removeItem(\"usuarioActual\");\n  }\n\n  borrarUsuario(usuario: User) {\n    let email = usuario.correo;\n    this.borrarAuth({ email })\n      .then(response => {\n        console.log(response);\n        this.borrarUsuarioFs(usuario);\n      })\n      .catch(error => {\n        console.log(error);\n      })\n  }\n\n  //Metodos de Firebase Authentication\n  mostrarAuth(): string {\n    return String(this.auth.currentUser?.email);\n  }\n\n  registroAuth({ email, password }: any) {\n    return createUserWithEmailAndPassword(this.auth, email, password);\n  }\n\n  ingresoAuth({ email, password }: any) {\n    return signInWithEmailAndPassword(this.auth, email, password);\n  }\n\n  cerrarAuth() {\n    return signOut(this.auth);\n  }\n\n  borrarAuth({ email }: any) {\n    return deleteUser(email);\n  }\n\n  sesionAuth(user: UserService) {\n    onAuthStateChanged(this.auth, (user) => {\n      if (user) {\n        this.router.navigate(['/logout']);\n      } else {\n\n      }\n    })\n  }\n\n  ingresoGoogleAuth() {\n    return signInWithPopup(this.auth, new GoogleAuthProvider());\n  }\n\n  //Metodos de Firestore\n  nuevoUsuarioFs(usuario: User) {\n    const usarioRef = collection(this.firestore, 'usuarios');\n    return addDoc(usarioRef, usuario);\n  }\n\n  consultaUsuarioFs(): Observable<User[]> {\n    const usuarioRef = collection(this.firestore, 'usuarios');\n    return collectionData(usuarioRef, { idField: 'id' }) as Observable<User[]>;\n  }\n\n  borrarUsuarioFs(usuario: User) {\n    const usuarioRef = doc(this.firestore, `usuarios/${usuario.id}`);\n    return deleteDoc(usuarioRef);\n\n  }\n\n  validarUsuario(correo: string): Boolean {\n    this.consultaUsuarioFs().subscribe(users => {\n      this.usuarios = users;\n    })\n    if (this.usuarios != null) {\n      for (let i of this.usuarios) {\n        if (i.correo == correo) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return true\n    }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}