{"ast":null,"code":"import { collectionData } from '@angular/fire/firestore';\nimport { collection, addDoc, doc, deleteDoc } from '@angular/fire/firestore';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nexport class ReservacionesService {\n  constructor(firestore) {\n    this.firestore = firestore;\n    this.reservaciones = [];\n  }\n  //Metodos de Firestore\n  anadirReservacion(reservacion, casa) {\n    const reservacionesRef = collection(this.firestore, casa);\n    return addDoc(reservacionesRef, reservacion);\n  }\n  obtenerReservaciones(casa) {\n    const reservacionesRef = collection(this.firestore, casa);\n    return collectionData(reservacionesRef, {\n      idField: 'id'\n    });\n  }\n  borrarReservacion(reservacion, casa) {\n    const reservacionRef = doc(this.firestore, `${casa}/${reservacion.id}`);\n    return deleteDoc(reservacionRef);\n  }\n  fechasOcupadas(casa) {\n    let fechas = [];\n    this.obtenerReservaciones(casa).subscribe(resrvs => {\n      this.reservaciones = resrvs;\n    });\n    if (this.reservaciones != null) {\n      for (let i of this.reservaciones) {\n        let checkin = i.checkin;\n        while (checkin <= i.checkout) {\n          fechas.push(checkin);\n          checkin.setDate(checkin.getDate() + 1);\n        }\n      }\n    }\n    return fechas;\n  }\n}\nReservacionesService.ɵfac = function ReservacionesService_Factory(t) {\n  return new (t || ReservacionesService)(i0.ɵɵinject(i1.Firestore));\n};\nReservacionesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ReservacionesService,\n  factory: ReservacionesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAEEA,cAAc,QACT,yBAAyB;AAChC,SACEC,UAAU,EACVC,MAAM,EACNC,GAAG,EACHC,SAAS,QACJ,yBAAyB;;;AAOhC,OAAM,MAAOC,oBAAoB;EAI/BC,YAAoBC,SAAoB;IAApB,cAAS,GAATA,SAAS;IAF7B,kBAAa,GAAkB,EAAE;EAEW;EAE5C;EACAC,iBAAiB,CAACC,WAAwB,EAAEC,IAAY;IACtD,MAAMC,gBAAgB,GAAGV,UAAU,CAAC,IAAI,CAACM,SAAS,EAAEG,IAAI,CAAC;IACzD,OAAOR,MAAM,CAACS,gBAAgB,EAAEF,WAAW,CAAC;EAC9C;EAEAG,oBAAoB,CAACF,IAAY;IAC/B,MAAMC,gBAAgB,GAAGV,UAAU,CAAC,IAAI,CAACM,SAAS,EAAEG,IAAI,CAAC;IACzD,OAAOV,cAAc,CAACW,gBAAgB,EAAE;MAAEE,OAAO,EAAE;IAAI,CAAE,CAA8B;EACzF;EAEAC,iBAAiB,CAACL,WAAwB,EAAEC,IAAY;IACtD,MAAMK,cAAc,GAAGZ,GAAG,CAAC,IAAI,CAACI,SAAS,EAAE,GAAGG,IAAI,IAAID,WAAW,CAACO,EAAE,EAAE,CAAC;IACvE,OAAOZ,SAAS,CAACW,cAAc,CAAC;EAClC;EAEAE,cAAc,CAACP,IAAY;IACzB,IAAIQ,MAAM,GAAW,EAAE;IACvB,IAAI,CAACN,oBAAoB,CAACF,IAAI,CAAC,CAACS,SAAS,CAACC,MAAM,IAAG;MACjD,IAAI,CAACC,aAAa,GAAGD,MAAM;IAC7B,CAAC,CAAC;IACF,IAAI,IAAI,CAACC,aAAa,IAAI,IAAI,EAAE;MAC9B,KAAK,IAAIC,CAAC,IAAI,IAAI,CAACD,aAAa,EAAE;QAChC,IAAIE,OAAO,GAAGD,CAAC,CAACC,OAAO;QACvB,OAAOA,OAAO,IAAID,CAAC,CAACE,QAAQ,EAAE;UAC5BN,MAAM,CAACO,IAAI,CAACF,OAAO,CAAC;UACpBA,OAAO,CAACG,OAAO,CAACH,OAAO,CAACI,OAAO,EAAE,GAAG,CAAC,CAAC;;;;IAI5C,OAAOT,MAAM;EACf;;AArCWb,oBAAoB;mBAApBA,oBAAoB;AAAA;AAApBA,oBAAoB;SAApBA,oBAAoB;EAAAuB,SAApBvB,oBAAoB;EAAAwB,YAFnB;AAAM","names":["collectionData","collection","addDoc","doc","deleteDoc","ReservacionesService","constructor","firestore","anadirReservacion","reservacion","casa","reservacionesRef","obtenerReservaciones","idField","borrarReservacion","reservacionRef","id","fechasOcupadas","fechas","subscribe","resrvs","reservaciones","i","checkin","checkout","push","setDate","getDate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Artur\\Desktop\\ProyectoFinal1\\src\\app\\services\\reservaciones.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Firestore,\n  collectionData\n} from '@angular/fire/firestore';\nimport {\n  collection,\n  addDoc,\n  doc,\n  deleteDoc\n} from '@angular/fire/firestore';\nimport { Observable, Subscription } from 'rxjs';\nimport Reservacion from './reservacion.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ReservacionesService {\n\n  reservaciones: Reservacion[] = [];\n\n  constructor(private firestore: Firestore) { }\n\n  //Metodos de Firestore\n  anadirReservacion(reservacion: Reservacion, casa: string) {\n    const reservacionesRef = collection(this.firestore, casa);\n    return addDoc(reservacionesRef, reservacion);\n  }\n\n  obtenerReservaciones(casa: string): Observable<Reservacion[]> {\n    const reservacionesRef = collection(this.firestore, casa);\n    return collectionData(reservacionesRef, { idField: 'id' }) as Observable<Reservacion[]>;\n  }\n\n  borrarReservacion(reservacion: Reservacion, casa: string) {\n    const reservacionRef = doc(this.firestore, `${casa}/${reservacion.id}`);\n    return deleteDoc(reservacionRef);\n  }\n\n  fechasOcupadas(casa: string): Date[] {\n    let fechas: Date[] = [];\n    this.obtenerReservaciones(casa).subscribe(resrvs => {\n      this.reservaciones = resrvs;\n    })\n    if (this.reservaciones != null) {\n      for (let i of this.reservaciones) {\n        let checkin = i.checkin;\n        while (checkin <= i.checkout) {\n          fechas.push(checkin);\n          checkin.setDate(checkin.getDate() + 1);\n        }\n      }\n    }\n    return fechas;\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}